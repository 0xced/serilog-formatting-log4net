name: Continuous Integration

on: push

env:
  Configuration: Release
  ContinuousIntegrationBuild: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs:
  package:
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    name: Run tests and create NuGet package
    outputs:
      version: ${{ steps.dotnet-pack.outputs.version }}
      nupkg-filename: ${{ steps.dotnet-pack.outputs.nupkg-filename }}
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Retrieve cached NuGet packages
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      - name: Restore NuGet packages
        run: dotnet restore --verbosity normal
      - name: Build solution
        run: dotnet build --verbosity normal
      - name: Run tests
        run: dotnet test --no-build --verbosity normal
      - name: Create NuGet package
        run: dotnet pack --output . --no-build --verbosity normal
        id: dotnet-pack
      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v2
        if: matrix.os == 'macos-latest'
        with:
          name: ${{ steps.dotnet-pack.outputs.nupkg-filename }}
          path: ${{ steps.dotnet-pack.outputs.nupkg-filename }}
  publish:
    runs-on: macos-latest
    needs: package
    if: github.ref == 'refs/heads/prerelease' || startsWith(github.ref, 'refs/tags')
    name: Publish NuGet package and create GitHub release
    steps:
      - name: Download NuGet package artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.dotnet-pack.outputs.nupkg-filename }}
      - name: Add GitHub package registry source
        run: dotnet nuget add source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --name github --username ${{ github.repository_owner }} --password ${{ github.token }} --store-password-in-clear-text
      - name: Publish NuGet package on nuget.org
        run: dotnet nuget push ${{ needs.package.outputs.nupkg-filename }} --source https://api.nuget.org/v3/index.json --api-key "${{ secrets.NUGET_API_KEY }}"
      - name: Publish NuGet package on github.com
        run: dotnet nuget push ${{ needs.package.outputs.nupkg-filename }} --source github
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.package.outputs.version }}
          release_name: Version ${{ needs.package.outputs.version }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: ${{ contains(needs.package.outputs.version, '-') }}
